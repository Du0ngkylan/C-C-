#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <sys/sem.h>
#include <iostream>
#include <sys/wait.h>
#include "shared_defs.h"
using namespace std;

void sem_lock(int semid){
	struct sembuf sem_op;
	sem_op.sem_num = 0;
	sem_op.sem_op = -1;
	sem_op.sem_flg = 0;
	if (semop(semid, &sem_op, 1) == -1){
		perror("sem lock");
	}
}

void sem_unlock(int semid){
	struct sembuf sem_op;
	sem_op.sem_num = 0;
	sem_op.sem_op = 1;
	sem_op.sem_flg = 0;
	if (semop(semid, &sem_op, 1) == -1){
		perror("sem lock");
	}
}

void random_delay(){
	int delay = rand()%10;
	usleep(delay);
}

void add_country(int semid, country* con, int* num, char* name, char* cap, char* cur, int pop){
	sem_lock(semid);
	con->pop = pop;
	strcpy(con->name, name);
	strcpy(con->cap, cap);
	strcpy(con->cur, cur);
	*num++;
	con++;
	sem_unlock(semid);
	random_delay();
}

void read_country(country* con){
	cout<<endl<<"Country: "<<endl;
	cout<<"	name: "<<con->name<<endl;
	cout<<"	pop: "<<con->pop<<endl;
	cout<<"	cap: "<<con->cap<<endl;
	cout<<"	cur: "<<con->cur<<endl<<endl;
}

int main(){
	key_t key = ftok(KEY_FILE, ID);
	int shmid = shmget(key, SHARED_SIZE, IPC_CREAT | 0666);
	if (shmid == -1){
		shmid = shmget(key, SHARED_SIZE, 0);
		if (shmid == -1){
			perror("Can't get shared memory");
			return 1;
		}
	}
	char* addr = (char*)shmat(shmid, 0, 0);
	if (addr == NULL){
		perror("Can't attach shared memory to process");
		return 1;
	}
	
	int* country_num = (int*) addr;
	country *con = (country*)((char*)addr + sizeof(int));
	
	int semid;
	union semun sem_val;
	
	key_t sem_key = ftok(SEM_FILE, ID);
	if ((semid = semget(sem_key, 1, IPC_CREAT | 0777)) == -1){
		perror("semget");
		return 1;
	}
	
	sem_val.val = 1;
	if (semctl(semid, 0, SETVAL, sem_val) == -1){
		perror("semctl");
		return 1;
	}
	
	country_num = 0;
	
	pid_t pid = fork();
	if (pid == -1){
		perror("Can't create child process");
		return 1;
	} else if (pid == 0){
		for (int i = 0; i < 2; i++){
			sem_lock(semid);
			cout << "\n------------------------------\n";
			cout << "Print all country: num = "<<*country_num<<endl;
			for (int i = 0; i < *country_num; i++){
				read_country(con);
				con++;
			}
			con = (country*)((char*)addr + sizeof(int));
			sem_unlock(semid);
		}
		if (shmdt(addr) == -1){
			perror("Can't detach shared memory");
			return 1;
		}
		exit(1);
	}

	printf("Write Vietnam to shared memory\n");
	add_country(semid, con, country_num, "Vietnam", "Hanoi", "Dong", 96000000);
	
	printf("Write America to shared memory\n");
	add_country(semid, con, country_num, "America", "Wasington DC", "USD", 100000000);
	
	int status;
	wait(&status);
	
	if (shmdt(addr) == -1){
		perror("Can't detach shared memory");
		return 1;
	}
	
	struct shmid_ds shm_desc;
	if (shmctl(shmid, IPC_RMID, &shm_desc) == -1){
		perror("shmclt: rmid");
		return 1;
	}
	
	return 0;
}
